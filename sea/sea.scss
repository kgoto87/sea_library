// A great function from Hugo Giraudel's blog post
// https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
@function remove($list, $value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    } @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

$animations: (
    opacity:    opacity,
    from_top:   transform,
    from_bottom:transform,
    from_left:  transform,
    from_right: transform
);

$transitionDuration : 0.5s;



// array of all "transform" animations
// 1st param: category
// 2nd param: class name
// 3rd param: transform function
// 4th param: value when hidden
// 5th param: original value
// 6th param: value when hovered
$transforms:(
    (from_top,      translateY, (-20%),     (0),    -10%),
    (from_bottom,   translateY, (20%),      (0),    10%),
    (from_left,     translateX, (-20%),     (0),    -5%),
    (from_right,    translateX, (20%),      (0),    5%),
    (zoom_in,       scale,      (0.8, 0.8), (1, 1), (1.3, 1.3)),
    (zoom_out,      scale,      (1.3, 1.3), (1, 1), (0.9, 0.9)),
    (rotate_right,  rotate,     -15deg,     0,      -3deg),
    (rotate_left,   rotate,     15deg,      0,      3deg),
    (spin_right,    rotate,     -360deg,    0,      -360deg),
    (spin_left,     rotate,     360deg,     0,      360deg),
);

body {
    height: auto;
}

.sea_scroll {
    
    transition: all $transitionDuration;
    
    &.sea_opacity {
        &[data-sea-status=hidden] {
            opacity: 0;
        }

        &[data-sea-status=shown] {
            opacity: 1;
        }
    }
 
    // combinations initial set
    $combinations: $transforms;
    
    @each $transform in $transforms {
        &.sea_#{nth($transform, 1)} {

            &[data-sea-status=hidden] {
                transform: #{nth($transform, 2)}(#{nth($transform, 3)});
            }

            &[data-sea-status=shown] {
                transform: #{nth($transform, 2)}(#{nth($transform, 4)});
            }

            // combinations
            $combinations: remove($combinations, $transform);
            @each $combination in $combinations {
                @if nth($transform, 2) != nth($combination, 2) {
                    &.sea_#{nth($combination, 1)} {
                        &[data-sea-status=hidden] {
                            @if nth($transform, 2) == translateY and nth($combination, 2) == rotate {
                                transform: #{nth($transform, 2)}(#{nth($transform, 3) * 2}) #{nth($combination, 2)}(#{nth($combination, 3)});
                            } @else {
                                transform: #{nth($transform, 2)}(#{nth($transform, 3)}) #{nth($combination, 2)}(#{nth($combination, 3)});
                            }
                        }

                        &[data-sea-status=shown] {
                            transform: #{nth($transform, 2)}(#{nth($transform, 4)}) #{nth($combination, 2)}(#{nth($combination, 4)});
                        }
                    }
                }
            }
        }
    }
}

.sea_hover {
    
    transition: all $transitionDuration;
    
    &.sea_opacity {
        opacity: 1;
        &:hover {
            opacity: 0.5;
        }
    }

    &.sea_ {
        @each $transform in $transforms {
            &#{nth($transform, 1)} {

                transform: #{nth($transform, 2)}(#{nth($transform, 4)});

                &:hover {
                    transform: #{nth($transform, 2)}(#{nth($transform, 5)});
                }
            }
        }
    }
}
